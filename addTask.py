#!/usr/bin/python
import sys, datetime, os, subprocess, io
sys.path.append('database/')
sys.path.append('logic/')
import DiaryDatabaseWrapper, newTag, newAuthor, commonDiaryFunctions

def addTask(argv):
    """
        Generate a new task file.
    """
    taskTitle, tagListString, templateFilename, authorInitialsList, \
        year, month, day = validateInputsAndSetDefaults(argv)    
    taskDir = createFolders(year, month, day)
    taskFilename = createTaskFilename(year, month, day, taskDir, \
        authorInitialsList)
    createFile(taskDir,taskFilename,taskTitle, tagListString, templateFilename, \
        authorInitialsList)
    openTask(taskDir + '/' + taskFilename)
    
# Input validation
def validateInputsAndSetDefaults(argv):
    """
        Validate the provided input and set the defaults values for
        the optional parameters if not specified or empty.
    """
    nInputs = len(argv)
    # Validate that 2 to 5 input variables are given
    if nInputs<2 or nInputs>5:
        print("Error: You must specify 2 to 5 input parameters.")
        print("addTask.py \"tagA tagB\" \"Task Title\" authorInitials " + \
            "template YYYY-MM-DD")
        sys.exit(2)
    tagListString = argv[0]
    taskTitle = argv[1]
    # Validate the tag
    # The provided tag(s) must be compared to the tag database. If not
    # found, it must be generated by calling the newTag function.
    tagListString = checkTags(tagListString)[0]
    # Set or validate author initials
    if nInputs<3 or not argv[2]:
        authorInitialsList = ""
    else:
        # The provided author initials must be compared to the author database.
        # If not found, it must be generated by calling the newAuthor function.
        authorInitialsList = checkAuthors(argv[2])
    # Set or validate the template
    if nInputs<4 or not argv[3]:
        templateFilename = 'default.tpl.tex'
    else:
        templateFilename = argv[3] + '.tpl.tex'
        templateDir = \
            commonDiaryFunctions.unicodeDir(os.path.abspath(__file__)) + \
            '/templates'
        if not os.path.isfile(templateDir + '/' + templateFilename):
            print("Error: The specified template file does not exist in " + \
                "the template folder. Please create it.")
    # Set or validate the date
    if nInputs<5 or not argv[4]:
        now = datetime.datetime.now()
        year = commonDiaryFunctions.unicodeStr(now.year)
        month = commonDiaryFunctions.unicodeStr(now.month).zfill(2)
        day = commonDiaryFunctions.unicodeStr(now.day).zfill(2)
    else:
        try:
            datetime.datetime.strptime(argv[4], '%Y-%m-%d')
        except ValueError:
            raise ValueError("Incorrect date or date format." + \
                "Should be YYYY-MM-DD")
        year, month, day = argv[4].split('-')
    return taskTitle, tagListString, templateFilename, authorInitialsList, \
        year, month, day

# See if the provided tags are in the diary database
def checkTags(tagListString):
    """
        See if the provided tags are in the diary database.
    """
    # Create a diary database object.
    db = DiaryDatabaseWrapper.DiaryDatabaseWrapper()
    # Create a list of the tags
    tagList = tagListString.split(',')
    newTagList = list()
    for tag in tagList:
        # Remove leading and trailing spaces
        tag = tag.strip()
        # If an empty tag has been provided, ignore it
        if tag == '':
            print("An empty tag has been provided and is ignored.")
        else:
            # Is the tag in the database
            tagRows = db.selectFromTable('tags',('name',),\
                'WHERE name=\'' + tag + '\'')
            if len(tagRows)==0:
                # Ask the user to add it
                print("The tag '%s' does not exist in the diary database." % tag)
                sys.stdout.write("Do you want to add it (Y/n)? ")
                choice = commonDiaryFunctions.getUserInput().lower()
                if choice in ('','y','yes'):
                    tagTitle = ''
                    sys.stdout.write("Please provide a tag title: ")
                    while tagTitle=='':
                        tagTitle = commonDiaryFunctions.getUserInput()
                    newTag.addTag2database((tag,tagTitle))
                    newTagList.append(tag)
                else:
                    print("Ignoring the tag '%s'." % tag)
            else:
                newTagList.append(tag)
    db.close()
    if len(newTagList)==0:
        print("No valid tags have been provided. Aborting.")
        sys.exit(2)
    return ','.join(newTagList), newTagList

# See if the provided authors are in the author database
def checkAuthors(authorInitialsListString):
    """
        See if the provided authors are in the diary database.
    """
    # Create a diary database object.
    db = DiaryDatabaseWrapper.DiaryDatabaseWrapper()
    # Create a list of the tags
    authorInitialsList = authorInitialsListString.split(',')
    newAuthorInitialsList = list()
    for authorInitials in authorInitialsList:
        # Remove leading and trailing spaces
        authorInitials = authorInitials.strip()
        # If an empty author has been provided, ignore it
        if authorInitials == '':
            print("An empty author initials string has been provided "\
                "and is ignored.")
        else:
            # Is the author in the database
            authorInitialsRows = db.selectFromTable('authors',('initials',),\
                'WHERE initials=\'' + authorInitials + '\'')
            if len(authorInitialsRows)==0:
                # Ask the user to add it
                print("The author initials '%s' does not exist in the diary "\
                    "database." % authorInitials)
                sys.stdout.write("Do you want to add it (Y/n)? ")
                choice = commonDiaryFunctions.getUserInput().lower()
                if choice in ('','y','yes'):
                    authorName = ''
                    sys.stdout.write("Please provide a name: ")
                    while authorName=='':
                        authorName = commonDiaryFunctions.getUserInput()
                    authorEmail = ''
                    sys.stdout.write("Please provide an email address: ")
                    while authorEmail=='':
                        authorEmail = commonDiaryFunctions.getUserInput()
                    newAuthor.addAuthor2database((authorInitials,\
                        authorName,authorEmail))
                    newAuthorInitialsList.append(authorInitials)
                else:
                    print("Ignoring the author initials '%s'." % authorInitials)
            else:
                newAuthorInitialsList.append(authorInitials)
    db.close()
    if len(authorInitialsList)==0:
        print("No valid author initials have been provided. Aborting.")
        sys.exit(2)
    return authorInitialsList
    
# Create folders if needed
def createFolders(year, month, day):
    """
        Create the year, month, and day folders if needed.
    """
    entriesDir = \
        commonDiaryFunctions.unicodeDir(os.path.abspath(__file__)) + '/entries'
    if not os.path.isdir(entriesDir + '/' + year):
        os.makedirs(entriesDir + '/' + year)
    if not os.path.isdir(entriesDir + '/' + year + '/' + month):
        os.makedirs(entriesDir + '/' + year + '/' + month)
    if not os.path.isdir(entriesDir + '/' + year + '/' + month + '/' + day):
        os.makedirs(entriesDir + '/' + year + '/' + month + '/' + day)
    return entriesDir + '/' + year + '/' + month + '/' + day
        
# Create the file name
def createTaskFilename(year, month, day, taskDir, authorInitialsList):
    """
        Create the file name for the current task.
    """
    taskIndex = 0
    if len(authorInitialsList) > 0:
        baseFilename = year + month + day + '_' + authorInitialsList[0]
    else:
        baseFilename = year + month + day + '_'
    taskFilename = baseFilename + str(taskIndex) + '.tex'
    while os.path.isfile(taskDir + '/' + taskFilename):
        taskIndex = taskIndex+1
        taskFilename = baseFilename + str(taskIndex) + '.tex'
    return taskFilename

# Create the file containing the task
def createFile(taskDir,taskFilename,taskTitle, tagListString, templateFilename, \
        authorInitialsList):
    """
        Create the task file from the provided template.
    """
    templatePath = commonDiaryFunctions.unicodeDir(os.path.abspath(__file__)) \
        + '/templates/' + templateFilename
    taskPath = taskDir + '/' + taskFilename
    # Set the task title, the tags, and possibly also the author
    templateFile = io.open(templatePath, 'r', encoding='utf-8')
    taskFile = io.open(taskPath,'w', encoding='utf-8')
    for line in templateFile:
        # the task title
        line = line.replace('@taskTitle',taskTitle)
        # the task label
        root,ext = os.path.splitext(taskFilename)
        line = line.replace('@label', root)
        # the tags
        line = line.replace('@tags', tagListString)
        # If not empty, also set the author initials
        if authorInitialsList:
            line = line.replace('%\\authors{}', \
                '\\authors{'+ ','.join(authorInitialsList) +'}')
        taskFile.write(line)
    templateFile.close()
    taskFile.close()

# Open the task in the default latex editor
def openTask(taskPath):
    """
        Open the task in the default latex editor.
    """
    if sys.platform.startswith('darwin'):
        subprocess.call(('open', taskPath))
    elif os.name == 'nt':
        os.startfile(taskPath)
    elif os.name == 'posix':
        subprocess.call(('xdg-open', taskPath))

if __name__ == '__main__':
    unicodedInputList = \
        commonDiaryFunctions.convertTerminalInputs2Unicode(sys.argv[1:])
    addTask(unicodedInputList)
